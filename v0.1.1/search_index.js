var documenterSearchIndex = {"docs":
[{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = CompressedSparseBlocks","category":"page"},{"location":"#CompressedSparseBlocks","page":"Introduction","title":"CompressedSparseBlocks","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Documentation for CompressedSparseBlocks.","category":"page"},{"location":"#Why-and-when-should-I-use-CompressedSparseBlocks?","page":"Introduction","title":"Why and when should I use CompressedSparseBlocks?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"If you have a computation with an iteration where the time is dominated by a large sparse matrix multiplication, ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using LinearAlgebra, SparseArrays, BenchmarkTools\n\njulia> n = 2^22; d = 10; A = sprand(n,n,d/n); x = rand(n);\n\njulia> y = @btime $A*$x;\n  909.738 ms (2 allocations: 32.00 MiB)\n\njulia> yt = @btime $(transpose(A))*$x;\n  640.637 ms (2 allocations: 32.00 MiB)\n","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"you may want to consider the CompressedSparseBlocks.jl package.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using CompressedSparseBlocks\n","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Transforming a SparseMatrixCSC into a SparseMatrixCSB is straightforward, though it might take a few seconds for very large matrices.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> Ac = SparseMatrixCSB(A);\n","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"but the transformation cost can be eliminated with the speedup from CSB.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> yc = @btime $Ac*$x;\n  352.766 ms (2 allocations: 32.00 MiB)\n\njulia> yc ≈ y\ntrue\n\njulia> yct = @btime $(transpose(Ac))*$x;\n  379.569 ms (3 allocations: 32.00 MiB)\n\njulia> yct ≈ yt\ntrue","category":"page"},{"location":"#API","page":"Introduction","title":"API","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Modules = [CompressedSparseBlocks]","category":"page"},{"location":"#CompressedSparseBlocks.SparseMatrixCSB","page":"Introduction","title":"CompressedSparseBlocks.SparseMatrixCSB","text":"mutable struct SparseMatrixCSB{Tv, Ti} <: SparseArrays.AbstractSparseArray{Tv, Ti, 2}\n\nMatrix type for storing sparse matrices in the Compressed Sparse Blocks format. The standard way of constructing SparseMatrixCSB is to pass a SparseMatrixCSC object, see the constructors.\n\n\n\n\n\n","category":"type"},{"location":"#CompressedSparseBlocks.SparseMatrixCSB-Union{Tuple{SparseArrays.SparseMatrixCSC{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}, Tuple{SparseArrays.SparseMatrixCSC{Tv, Ti}, Integer}} where {Tv, Ti<:Integer}","page":"Introduction","title":"CompressedSparseBlocks.SparseMatrixCSB","text":"SparseMatrixCSB(A::SparseArrays.SparseMatrixCSC{Tv, Ti<:Integer}) -> SparseMatrixCSB\nSparseMatrixCSB(A::SparseArrays.SparseMatrixCSC{Tv, Ti<:Integer}, beta::Integer) -> SparseMatrixCSB\n\n\nConvert a SparseMatrixCSC matrix A into a SparseMatrixCSB matrix.\n\nOptional arguments\n\nbeta: The size of each block in base-2 logarithm; if 0 the package decides the block size internally.\n\n\n\n\n\n","category":"method"},{"location":"#CompressedSparseBlocks.getWorkers-Tuple{}","page":"Introduction","title":"CompressedSparseBlocks.getWorkers","text":"getWorkers() -> Int64\n\n\nQuery the number of Cilk workers.\n\n\n\n\n\n","category":"method"},{"location":"#CompressedSparseBlocks.setWorkers-Tuple{Int64}","page":"Introduction","title":"CompressedSparseBlocks.setWorkers","text":"setWorkers(np::Int64)\n\n\nSet the number of Cilk workers to np.\n\n\n\n\n\n","category":"method"}]
}
